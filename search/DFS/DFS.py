# depth first search (깊이 우선 검색)
# - 노드(정점) / node(voltex)
# - 간선 / edge

# 인접 행렬 - adjacency Matrix : 2차원 배열로 그래프의 연결 관계를 표현하는 방식
# 인접 리스트 - adjacency List : 리스트로 그래프의 연결 관계를 표현하는 방식 / 노드끼리 연결이 되어있지 않은 곳은 인접 행렬로 표현 시의 값은 무한대이다.

# 5-6 인접 행렬 방식 예제
INF = 99999999  # 무한의 선언 비용 선언

# 2차원 리스트를 이용해 인접 행렬 표현
graph = [
    [0, 7, 5],
    [7, 0, INF],
    [5, INF, 0]
]

# print(graph)

# 5-7 인접 리스트 방식 예제
# 행(Row)이 3개인 2차원 리스트로 인접 리스트 표현
graph = [[] for _ in range(3)]

# 노드 0에 연결된 노드 정보 저장(노드,거리)
graph[0].append((1, 7))
graph[0].append((2, 5))

# 노드 1에 연결된 노드 정보 저장(노드,거리)
graph[1].append((0, 7))

# 노드 2에 연결된 노드 정보 저장(노드,거리)
graph[2].append((0, 5))


# print(graph)

# 노드가 많을 수록 인접 리스트 방식이 유리 , 리스트 방식이 좀더 메모리를 효율적으로 사용하기 때문 ->

